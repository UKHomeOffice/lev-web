'use strict';

const helpers = require('../../../api/helpers');
const _ = require('lodash');

const record = {
  'date': '2012-08-09',
  'location': {
    'name': 'Manchester, Manchester, Metropolitan District of Manchester',
    'nameQualifier': 'generated by concatenating registrationDistrict, subDistrict and administrativeArea',
    'registrationDistrict': 'Manchester',
    'subDistrict': 'Manchester',
    'administrativeArea': 'Metropolitan District of Manchester'
  },
  'registrarSignature': 'J. Smith',
  'type': 'birth',
  'id': 1,
  'subjects': {
    'child': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'dateOfBirth': '2012-08-08',
      'sex': 'Indeterminate',
      'originalName': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      }
    },
    'father': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'occupation': 'Carpenter'
    },
    'mother': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'occupation': 'Carpenter',
      'maidenSurname': 'Black',
      'marriageSurname': 'White',
      'usualAddress': '34 Matriarchs Place, Mumstown, Mumford'
    },
    'informant': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'usualAddress': '34 Matriarchs Place, Mumstown, Mumford',
      'qualification': 'Mother',
      'signature': 'J. Smith'
    }
  },
  'systemNumber': 1,
  'status': {
    'potentiallyFictitiousBirth': false,
    'correction': 'None',
    'cancelled': false,
    'blockedRegistration': false,
    'marginalNote': 'None',
    'reRegistered': 'None'
  },
  'previousRegistration': {
    'date': '2012-08-09',
    'systemNumber': 1
  }
};
const expected = {
  'system-number': 1,
  surname: 'Smith',
  forenames: 'Joan Narcissus Ouroboros',
  dob: '08/08/2012',
  gender: 'Indeterminate',
  'birth-place': 'Kensington',
  mother: {
    name: 'Joan Narcissus Ouroboros Smith',
    nee: 'Black',
    marriageSurname: 'White',
    'birth-place': 'Kensington',
    occupation: 'Carpenter'
  },
  father: {
    name: 'Joan Narcissus Ouroboros Smith',
    'birth-place': 'Kensington',
    occupation: 'Carpenter'
  },
  registered: {
    by: 'Mother',
    district: 'Manchester',
    'sub-district': 'Manchester',
    'admin-area': 'Metropolitan District of Manchester',
    date: '09/08/2012'
  },
  status: {
    refer: false,
    fatherAdded: false,
    subsequentlyMarried: false,
    fatherModified: false,
    replaced: false,
    corrected: false,
    courtOrderInPlace: false,
    courtOrderRevoked: false
  },
  previousRegistration: {
    date: '2012-08-09',
    systemNumber: 1
  }
};
const blocked = {
  'system-number': 1,
  surname: 'UNAVAILABLE',
  forenames: 'UNAVAILABLE',
  dob: 'UNAVAILABLE',
  gender: 'UNAVAILABLE',
  'birth-place': 'UNAVAILABLE',
  mother: {
    name: 'UNAVAILABLE',
    nee: 'UNAVAILABLE',
    marriageSurname: 'UNAVAILABLE',
    'birth-place': 'UNAVAILABLE',
    occupation: 'UNAVAILABLE'
  },
  father: {
    name: 'UNAVAILABLE',
    'birth-place': 'UNAVAILABLE',
    occupation: 'UNAVAILABLE'
  },
  registered: {
    by: 'UNAVAILABLE',
    district: 'UNAVAILABLE',
    'sub-district': 'UNAVAILABLE',
    'admin-area': 'UNAVAILABLE',
    date: 'UNAVAILABLE'
  },
  status: {
    refer: true
  },
  previousRegistration: {
    date: null,
    systemNumber: null
  }
};

describe('api/helpers.js', () => {
  describe('processRecord()', () => {
    it('is a function', () => (typeof helpers.processRecord).should.equal('function'));
    it('takes one argument', () => helpers.processRecord.should.have.lengthOf(1));

    describe('when called with an argument that is a valid record', () => {
      let result;
      let myRecord;

      before(() => {
        result = helpers.processRecord(record);
      });

      it('returns a processed record', () => result.should.eql(expected));

      describe('that is blocked', () => {
        before(() => {
          myRecord = _.cloneDeep(record);
          myRecord.status.blockedRegistration = true;
          result = helpers.processRecord(myRecord);
        });

        it('returns a censored record', () => result.should.eql(blocked));
      });

      describe('that is a re-registration due to an unexpected reason', () => {
        before(() => {
          myRecord = _.cloneDeep(record);
          myRecord.status.reRegistered = 'unexpected';
          result = helpers.processRecord(myRecord);
        });

        it('returns a record with the refer status', () => result.status.refer.should.equal(true));
      });

      describe('that is a marked as potentially fictitious', () => {
        before(() => {
          myRecord = _.cloneDeep(record);
          myRecord.status.potentiallyFictitiousBirth = true;
          result = helpers.processRecord(myRecord);
        });

        it('returns a record with the refer status', () => result.status.refer.should.equal(true));
      });

      describe('that has an unexpected marginal note', () => {
        before(() => {
          myRecord = _.cloneDeep(record);
          myRecord.status.marginalNote = 'unexpected';
          result = helpers.processRecord(myRecord);
        });

        it('returns a record with the refer status', () => result.status.refer.should.equal(true));
      });

      describe('that is marked as cancelled', () => {
        before(() => {
          myRecord = _.cloneDeep(record);
          myRecord.status.cancelled = true;
          result = helpers.processRecord(myRecord);
        });

        it('returns a record with the refer status', () => result.status.refer.should.equal(true));
      });
    });
  });
});
