'use strict';

const _ = require('lodash');
const moment = require('moment');
const proxyquire = require('proxyquire');
const config = require('../../../config');

const response = {
  'date': '2012-08-09',
  'location': {
    'name': 'Manchester, Manchester, Metropolitan District of Manchester',
    'nameQualifier': 'generated by concatenating registrationDistrict, subDistrict and administrativeArea',
    'registrationDistrict': 'Manchester',
    'subDistrict': 'Manchester',
    'administrativeArea': 'Metropolitan District of Manchester'
  },
  'registrarSignature': 'J. Smith',
  'type': 'birth',
  'id': 1,
  'subjects': {
    'child': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'dateOfBirth': '2012-08-08',
      'sex': 'Indeterminate',
      'originalName': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      }
    },
    'father': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'occupation': 'Carpenter'
    },
    'mother': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'occupation': 'Carpenter',
      'maidenSurname': 'Black',
      'marriageSurname': 'White',
      'usualAddress': '34 Matriarchs Place, Mumstown, Mumford'
    },
    'informant': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'usualAddress': '34 Matriarchs Place, Mumstown, Mumford',
      'qualification': 'Mother',
      'signature': 'J. Smith'
    }
  },
  'systemNumber': 1,
  'status': {
    'potentiallyFictitiousBirth': false,
    'correction': 'None',
    'cancelled': false,
    'blockedRegistration': false,
    'marginalNote': 'None',
    'reRegistered': 'None'
  },
  'previousRegistration': {
    'date': '2012-08-09',
    'systemNumber': 1
  }
};
const parsedResponse = {
  'system-number': 1,
  surname: 'Smith',
  forenames: 'Joan Narcissus Ouroboros',
  dob: '08/08/2012',
  gender: 'Indeterminate',
  'birth-place': 'Kensington',
  mother: {
    name: 'Joan Narcissus Ouroboros Smith',
    nee: 'Black',
    marriageSurname: 'White',
    'birth-place': 'Kensington',
    occupation: 'Carpenter'
  },
  father: {
    name: 'Joan Narcissus Ouroboros Smith',
    'birth-place': 'Kensington',
    occupation: 'Carpenter'
  },
  registered: {
    by: 'Mother',
    district: 'Manchester',
    'sub-district': 'Manchester',
    'admin-area': 'Metropolitan District of Manchester',
    date: '09/08/2012'
  },
  status: {
    refer: false,
    fatherAdded: false,
    subsequentlyMarried: false,
    fatherModified: false,
    replaced: false,
    corrected: false,
    courtOrderInPlace: false,
    courtOrderRevoked: false
  },
  previousRegistration: {
    date: '2012-08-09',
    systemNumber: 1
  }
};

const expectedHeaders = {
  'Authorization': 'Bearer access_token',
  'X-Auth-Downstream-Username': 'mrs-caseworker'
};

describe('api/index.js', () => {
  let api;
  let expectedOAuthRequest;
  const requestGet = sinon.stub();
  const requestPost = sinon.stub();

  before(() => {
    const request = require('request');
    request.get = requestGet;
    request.post = requestPost;
    api = proxyquire('../../../api', {
      request: request,
      '../config': _.extend(config, {
        api: {
          protocol: 'http',
          host: 'testhost.com',
          port: 1111
        },
        oauth: {
          oauthUrl: 'http://oauthserver.com',
          clientId: 'clientId',
          clientSecret: 'clientSecret',
          username: 'username',
          password: 'password'
        }
      })
    });

    requestPost.yields(null, { statusCode: 200 }, JSON.stringify({
      'access_token': 'access_token',
      'expires_in': 300,
      'refresh_expires_in': 1800,
      'refresh_token': 'xxxx',
      'token_type': 'bearer',
      'id_token': 'yyyy',
      'not-before-policy': 0,
      'session_state': 'zzzz'
    }));

    const expectedBase64Auth = new Buffer('clientId:clientSecret').toString('base64');
    expectedOAuthRequest = {
      url: 'http://oauthserver.com',
      form: {
        grant_type: 'password', // eslint-disable-line camelcase
        username: 'username',
        password: 'password'
      },
      headers: {
        Authorization: 'Basic ' + expectedBase64Auth
      }
    };
  });

  describe('findByNameDOB()', () => {
    it('is a function', () => (typeof api.findByNameDOB).should.equal('function'));
    it('takes two arguments', () => api.findByNameDOB.should.have.lengthOf(2));

    describe('when called with no arguments', () => {
      it('throws a ReferenceError', () => expect(() => api.findByNameDOB()).to.throw(ReferenceError));
    });

    describe('when called with just one argument', () => {
      it('throws a ReferenceError', () => expect(() => api.findByNameDOB({})).to.throw(ReferenceError));
    });

    describe('when called with two arguments', () => {
      describe('and the first IS NOT an object', () => {
        it('throws a TypeError', () => expect(() => api.findByNameDOB(0, '')).to.throw(TypeError));
      });

      describe('and the first IS an object', () => {
        describe('and the second IS NOT a string', () => {
          it('throws a TypeError', () => expect(() => api.findByNameDOB({}, 0)).to.throw(TypeError));
        });

        describe('and the second IS a string', () => {
          let result;

          before(() => {
            const username = 'mrs-caseworker';
            const query = {
              surname: 'SURNAME',
              'forenames': 'FIRST SECOND',
              dob: '01/01/2001'
            };

            result = api.findByNameDOB(query, username);
          });

          it('first requests an OAuth2 token', () => requestPost.should.have.been.calledWith(expectedOAuthRequest));
          it('then makes a request using the correct query string and adds auth headers', () =>
            requestGet.should.have.been.calledWith({
              headers: expectedHeaders,
              url: 'http://testhost.com:1111/api/v0/events/birth'
                 + '?lastname=SURNAME&forenames=FIRST%20SECOND&dateofbirth=2001-01-01'
            }));
          it('then returns a promise', () => result.should.be.instanceOf(Promise));

          describe('when the api returns a valid list of records', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 200 }, JSON.stringify([response]));
              result = api.findByNameDOB({}, '');
            });

            it('resolves to a processed record', () =>
              result.should.eventually.eql([parsedResponse]));
          });

          describe('when the api returns invalid JSON', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 200 }, '[}');
              result = api.findByNameDOB({}, '');
            });

            it('rejects with an error', () =>
              result.should.be.rejectedWith(Error));
          });

          describe('when the api gives a 404', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 404 }, '');
              result = api.findByNameDOB({}, '');
            });

            it('rejects with a \'NotFoundError\' error', () =>
              result.should.be.rejectedWith(Error, 'Received status code "404" from API'));
          });

          describe('when the api gives a 401', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 401 }, '');
              result = api.findByNameDOB({}, '');
            });

            it('rejects with a \'NotAuthorized\' error', () =>
              result.should.be.rejectedWith(Error, 'Received status code "401" from API'));
          });

          describe('when something else happens', () => {
            before(() => {
              requestGet.yields(new Error('Something else happened'));
              result = api.findByNameDOB({}, '');
            });

            it('rejects with an error', () =>
              result.should.be.rejectedWith(Error, 'Something else happened'));
          });
        });
      });
    });
  });

  describe('findBirths()', () => {
    it('is a function', () => (typeof api.findBirths).should.equal('function'));
    it('takes two arguments', () => api.findBirths.should.have.lengthOf(2));

    describe('when called with no arguments', () => {
      it('throws a ReferenceError', () => expect(() => api.findBirths()).to.throw(ReferenceError));
    });

    describe('when called with just one argument', () => {
      it('throws a ReferenceError', () => expect(() => api.findBirths({})).to.throw(ReferenceError));
    });

    describe('when called with two arguments', () => {
      describe('and the first IS NOT an object', () => {
        it('throws a TypeError', () => expect(() => api.findBirths(0, '')).to.throw(TypeError));
      });

      describe('and the first IS an object', () => {
        describe('and the second IS NOT a string', () => {
          it('throws a TypeError', () => expect(() => api.findBirths({}, 0)).to.throw(TypeError));
        });

        describe('and the second IS a string', () => {
          let result;
          let query;
          const username = 'mrs-caseworker';
          const read = () => api.findBirths(query, username);

          describe('and the first DOES NOT contain a \'system-number\' property', () => {
            before(() => {
              query = {
                surname: 'SURNAME',
                forenames: 'FIRST SECOND',
                dob: '01/01/2001'
              };

              result = read();
            });

            it('makes a request using the correct query string and adds auth headers', () =>
              requestGet.should.have.been.calledWith({
                headers: expectedHeaders,
                url: 'http://testhost.com:1111/api/v0/events/birth'
                   + '?lastname=SURNAME&forenames=FIRST%20SECOND&dateofbirth=2001-01-01'
              }));
            it('returns a promise', () =>
              result.should.be.instanceOf(Promise));

            describe('when the api returns a valid list of records', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 200 }, JSON.stringify([response]));
                result = read();
              });

              it('resolves to a processed record', () =>
                result.should.eventually.eql([parsedResponse]));
            });

            describe('when the api returns invalid JSON', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 200 }, '[}');
                result = read();
              });

              it('rejects with an error', () =>
                result.should.be.rejectedWith(Error));
            });

            describe('when the api gives a 404', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 404 }, '');
                result = read();
              });

              it('rejects with a \'NotFoundError\' error', () =>
                result.should.be.rejectedWith(Error, 'Received status code "404" from API'));
            });

            describe('when the api gives a 401', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 401 }, '');
                result = read();
              });

              it('rejects with a \'NotAuthorized\' error', () =>
                result.should.be.rejectedWith(Error, 'Received status code "401" from API'));
            });

            describe('when something else happens', () => {
              before(() => {
                requestGet.yields(new Error('Something else happened'));
                result = read();
              });

              it('rejects with an error', () =>
                result.should.be.rejectedWith(Error, 'Something else happened'));
            });
          });

          describe('and the first DOES contain a \'system-number\' property', () => {
            before(() => {
              query = {
                'system-number': '400000001',
                surname: 'SURNAME',
                forenames: 'FIRST SECOND',
                dob: '01/01/2001'
              };

              result = read();
            });

            it('makes a request using the correct query string and adds auth headers', () =>
              requestGet.should.have.been.calledWith({
                headers: expectedHeaders,
                url: 'http://testhost.com:1111/api/v0/events/birth/400000001'
              }));
            it('returns a promise', () => result.should.be.instanceOf(Promise));

            describe('when the api returns a valid record', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 200 }, JSON.stringify(response));
                result = read();
              });

              it('resolves to a singleton list containing the processed record', () =>
                result.should.eventually.eql([parsedResponse]));
            });

            describe('when the api returns invalid JSON', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 200 }, '[}');
                result = read();
              });

              it('rejects with an error', () => result.should.be.rejectedWith(Error));
            });

            describe('when the api gives a 404', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 404 }, '');
                result = read();
              });

              it('rejects with a \'NotFoundError\' error', () =>
                result.should.be.rejectedWith(Error, 'Received status code "404" from API'));
            });

            describe('when the api gives a 401', () => {
              before(() => {
                requestGet.yields(null, { statusCode: 401 }, '');
                result = read();
              });

              it('rejects with a \'NotAuthorized\' error', () =>
                result.should.be.rejectedWith(Error, 'Received status code "401" from API'));
            });

            describe('when something else happens', () => {
              before(() => {
                requestGet.yields(new Error('Something else happened'));
                result = read();
              });

              it('rejects with an error', () => result.should.be.rejectedWith(Error, 'Something else happened'));
            });
          });
        });
      });
    });
  });

  describe('findBySystemNumber()', () => {
    it('is a function', () => (typeof api.findBySystemNumber).should.equal('function'));
    it('takes two arguments', () => api.findBySystemNumber.should.have.lengthOf(2));

    describe('when called with no arguments', () => {
      it('throws a ReferenceError', () => expect(() => api.findBySystemNumber()).to.throw(ReferenceError));
    });

    describe('when called with just one argument', () => {
      it('throws a ReferenceError', () => expect(() => api.findBySystemNumber({})).to.throw(ReferenceError));
    });

    describe('when called with two arguments', () => {
      describe('and the first IS NOT an integer', () => {
        it('throws a TypeError', () => expect(() => api.findBySystemNumber({}, '')).to.throw(TypeError));
      });

      describe('and the first IS an integer', () => {
        describe('and the second IS NOT a string', () => {
          it('throws a TypeError', () => expect(() => api.findBySystemNumber(0, 0)).to.throw(TypeError));
        });

        describe('and the second IS a string', () => {
          let result;

          before(() => {
            const username = 'mrs-caseworker';
            const id = 400000001;

            result = api.findBySystemNumber(id, username);
          });

          it('makes a request using the correct query string and adds auth headers', () =>
            requestGet.should.have.been.calledWith({
              headers: expectedHeaders,
              url: 'http://testhost.com:1111/api/v0/events/birth/400000001'
            }));
          it('returns a promise', () => result.should.be.instanceOf(Promise));

          describe('when the api returns a valid record', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 200 }, JSON.stringify(response));
              result = api.findBySystemNumber(0, '');
            });

            it('resolves to a processed record', () =>
              result.should.eventually.eql(parsedResponse));
          });

          describe('when the api returns invalid JSON', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 200 }, '[}');
              result = api.findBySystemNumber(0, '');
            });

            it('rejects with an error', () =>
              result.should.be.rejectedWith(Error));
          });

          describe('when the api gives a 404', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 404 }, '');
              result = api.findBySystemNumber(0, '');
            });

            it('rejects with a \'NotFoundError\' error', () =>
              result.should.be.rejectedWith(Error, 'Received status code "404" from API'));
          });

          describe('when the api gives a 401', () => {
            before(() => {
              requestGet.yields(null, { statusCode: 401 }, '');
              result = api.findBySystemNumber(0, '');
            });

            it('rejects with a \'NotAuthorized\' error', () =>
              result.should.be.rejectedWith(Error, 'Received status code "401" from API'));
          });

          describe('when something else happens', () => {
            before(() => {
              requestGet.yields(new Error('Something else happened'));
              result = api.findBySystemNumber(0, '');
            });

            it('rejects with an error', () =>
              result.should.be.rejectedWith(Error, 'Something else happened'));
          });
        });
      });
    });
  });

  describe('userActivityReport', () => {
    it('is a function', () => (typeof api.userActivityReport).should.equal('function'));
    it('should throw a ReferenceError when no parameters are provided', () => {
      expect(api.userActivityReport).to.throw(ReferenceError);
    });

    describe('when called without the required `from` or `to` dates', () => {
      it('should throw a ReferenceError if either parameter is omitted', () => {
        expect(from => api.userActivityReport(from, moment())).to.throw(ReferenceError);
        expect(() => api.userActivityReport(moment())).to.throw(ReferenceError);
      });
      it('should throw a ReferenceError if either parameter is not a `moment` date object', () => {
        expect(() => api.userActivityReport('from', moment())).to.throw(TypeError);
        expect(() => api.userActivityReport(moment(), 'to')).to.throw(TypeError);
      });
      it('should throw a ReferenceError if either parameter is not a valid date object', () => {
        expect(() => api.userActivityReport(moment('from'), moment())).to.throw(RangeError);
        expect(() => api.userActivityReport(moment(), moment('2017-02-29'))).to.throw(RangeError);
      });
    });

    describe('when called with valid dates', () => {
      it('should throw a RangeError if the `to` date is before `from`', () =>
        expect(() => api.userActivityReport(moment().add(1, 'days'), moment())).to.throw(RangeError)
      );

      describe('as a proper range', () => {
        let result;
        const from = '2001-01-01';
        const to = '2001-02-01';

        before('try to get the user activity data', () => {
          result = api.userActivityReport(moment(from), moment(to));
        });

        it('should make a request to the API', () =>
        requestGet.lastCall.should.have.been.calledWith({
          headers: { Authorization: 'Bearer access_token' },
          url: `http://testhost.com:1111/api/v0/audit/user-activity?from=${from}&to=${to}`
        }));

        it('returns a promise', () => result.should.be.instanceOf(Promise));
      });
    });
  });
});
