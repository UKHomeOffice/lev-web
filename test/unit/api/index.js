'use strict';

var proxyquire = require('proxyquire');
var response = {
  'date': '2008-08-09',
  'location': {
    'name': 'Manchester, Manchester, Metropolitan District of Manchester',
    'nameQualifier': 'generated by concatenating registrationDistrict, subDistrict and administrativeArea',
    'registrationDistrict': 'Manchester',
    'subDistrict': 'Manchester',
    'administrativeArea': 'Metropolitan District of Manchester'
  },
  'registrarSignature': 'J. Smith',
  'type': 'birth',
  'id': 1,
  'subjects': {
    'child': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'dateOfBirth': '2008-08-08',
      'sex': 'Indeterminate',
      'originalName': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      }
    },
    'father': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'occupation': 'Carpenter'
    },
    'mother': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'birthplace': 'Kensington',
      'occupation': 'Carpenter',
      'maidenSurname': 'Black',
      'marriageSurname': 'White',
      'usualAddress': '34 Matriarchs Place, Mumstown, Mumford'
    },
    'informant': {
      'name': {
        'givenName': 'Joan Narcissus Ouroboros',
        'surname': 'Smith',
        'fullName': 'Joan Narcissus Ouroboros Smith',
        'qualifier': 'generated from prepending forename to surname'
      },
      'usualAddress': '34 Matriarchs Place, Mumstown, Mumford',
      'qualification': 'Mother',
      'signature': 'J. Smith'
    }
  },
  'systemNumber': 1,
  'status': {
    'blockedRegistration': false,
    'cancelled': false,
    'cautionMark': false,
    'courtOrder': 'None',
    'fictitiousBirth': false,
    'reRegistered': 'None'
  },
  'previousRegistration': {
    'date': '2008-08-09',
    'systemNumber': 1
  }
};
var parsedResponse = {
  'system-number': 1,
  surname: 'Smith',
  forenames: 'Joan Narcissus Ouroboros',
  dob: '08/08/2008',
  gender: 'Indeterminate',
  'birth-place': 'Kensington',
  mother:
   { name: 'Joan Narcissus Ouroboros Smith',
     nee: 'Black',
     'birth-place': 'Kensington',
     occupation: 'Carpenter' },
  father:
   { name: 'Joan Narcissus Ouroboros Smith',
     'birth-place': 'Kensington',
     occupation: 'Carpenter' },
  registered:
   { jointly: 'No',
     district: 'Manchester',
     'sub-district': 'Manchester',
     'admin-area': 'Metropolitan District of Manchester',
     date: '09/08/2008' },
  status:
   { blockedRegistration: false,
     cancelled: false,
     cautionMark: false,
     courtOrder: '',
     fictitiousBirth: false,
     reRegistered: '' },
  previousRegistration: { date: '2008-08-09', systemNumber: 1 }
};

describe('api', function() {
  var api;
  var request = require('request');
  var config = require('../../../config');
  var requestGet;

  beforeEach(sinon.test(function() {
    requestGet = this.stub();
    request.get = requestGet;
    api = proxyquire('../../../api', {
      request: request,
      '../config': config
    });
  }));

  describe('resolved promise', function() {

    describe('configuring', function() {
      it('GETs the configed url for system-number', function() {
        requestGet.yields(null, { statusCode: 200 }, JSON.stringify(response));
        config.api.host = 'testhost.com';
        config.api.port = 1111;

        return api.read({
          'system-number': '1234'
        }).then(function() {
          request.get.should.have.been.calledWith('http://testhost.com:1111/api/v0/events/birth/1234');
        });
      });

      it('GETs the configed url for surname', function() {
        requestGet.yields(null, { statusCode: 200 }, JSON.stringify([response]));
        config.api.host = 'testhost.com';
        config.api.port = 1111;

        return api.read({
          'surname': 'smith'
        }).then(function() {
          request.get.should.have.been.calledWith('http://testhost.com:1111/api/v0/events/birth?lastname=smith');
        });
      });
    });

    describe('GET with system-number', function() {
      it('gives back one record', function() {
        requestGet.yields(null, { statusCode: 200 }, JSON.stringify(response));

        return api.read({
          'system-number': '1234'
        }).then(function(data) {
          data.records.length.should.equal(1);
          data.records[0]['system-number'].should.equal(1);
          data.records[0].should.eql(parsedResponse);
        });
      });
    });

    describe('GET with surname', function() {
      it('gives back one record', function() {
        requestGet.yields(null, { statusCode: 200 }, JSON.stringify([response, response]));

        return api.read({
          'surname': 'smith'
        }).then(function(data) {
          data.records.length.should.equal(2);
          data.records[0]['system-number'].should.equal(1);
          data.records[0].should.eql(parsedResponse);
        });
      });
    });

  });

  describe('rejected promise', function() {
    it('rejects the promise if an error is returned from the api', function() {
      var err = new Error('SERVER DID SOMETHING');
      requestGet.yields(err, {
        statusCode: 500
      });

      return api.read({
        'system-number': '1234'
      }).should.eventually.be.rejectedWith(err);
    });

   it('rejects the promise if the status code is not 200', function() {
      requestGet.yields(null, {
        statusCode: 418
      });

      return api.read({
        'system-number': '1234'
      }).should.eventually.be.rejectedWith(Error, 'Received status code "418" from API');
    });

    it('rejects the promise if the JSON cannot be parsed', function() {
      requestGet.yields(null, { statusCode: 200 }, '<not><json></json></not>');

      return api.read({
        'system-number': '1234'
      }).should.eventually.be.rejectedWith(Error, 'Unexpected token <');
    });

    it('rejects the promise if the JSON Object does not contain the correct fields', function() {
      requestGet.yields(null, { statusCode: 200 }, JSON.stringify({not: 'enough data'}));

      return api.read({
        'system-number': '1234'
      }).should.eventually.be.rejectedWith(Error, 'Cannot read property \'child\' of undefined');
    });

  });


  describe('.read()', function() {
    it('returns a Promise', function() {
      (api.read() instanceof Promise).should.be.true;
    });
  });
});